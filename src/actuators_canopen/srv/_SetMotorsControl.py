"""autogenerated by genpy from actuators_canopen/SetMotorsControlRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetMotorsControlRequest(genpy.Message):
  _md5sum = "4aafbb70ad84cfa54bc91135004c3506"
  _type = "actuators_canopen/SetMotorsControlRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 left_engine_rate

float32 left_engine_servo_angle

bool left_engine_servo_fix


float32 right_engine_rate

float32 right_engine_servo_angle

bool right_engine_servo_fix


float32 left_electromotor_rate

float32 left_electromotors_servo_anglex
float32 left_electromotors_servo_angley

bool left_electromotors_servo_fix


float32 right_electromotor_rate

float32 right_electromotors_servo_anglex
float32 right_electromotors_servo_angley

bool right_electromotors_servo_fix

"""
  __slots__ = ['left_engine_rate','left_engine_servo_angle','left_engine_servo_fix','right_engine_rate','right_engine_servo_angle','right_engine_servo_fix','left_electromotor_rate','left_electromotors_servo_anglex','left_electromotors_servo_angley','left_electromotors_servo_fix','right_electromotor_rate','right_electromotors_servo_anglex','right_electromotors_servo_angley','right_electromotors_servo_fix']
  _slot_types = ['float32','float32','bool','float32','float32','bool','float32','float32','float32','bool','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_engine_rate,left_engine_servo_angle,left_engine_servo_fix,right_engine_rate,right_engine_servo_angle,right_engine_servo_fix,left_electromotor_rate,left_electromotors_servo_anglex,left_electromotors_servo_angley,left_electromotors_servo_fix,right_electromotor_rate,right_electromotors_servo_anglex,right_electromotors_servo_angley,right_electromotors_servo_fix

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetMotorsControlRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_engine_rate is None:
        self.left_engine_rate = 0.
      if self.left_engine_servo_angle is None:
        self.left_engine_servo_angle = 0.
      if self.left_engine_servo_fix is None:
        self.left_engine_servo_fix = False
      if self.right_engine_rate is None:
        self.right_engine_rate = 0.
      if self.right_engine_servo_angle is None:
        self.right_engine_servo_angle = 0.
      if self.right_engine_servo_fix is None:
        self.right_engine_servo_fix = False
      if self.left_electromotor_rate is None:
        self.left_electromotor_rate = 0.
      if self.left_electromotors_servo_anglex is None:
        self.left_electromotors_servo_anglex = 0.
      if self.left_electromotors_servo_angley is None:
        self.left_electromotors_servo_angley = 0.
      if self.left_electromotors_servo_fix is None:
        self.left_electromotors_servo_fix = False
      if self.right_electromotor_rate is None:
        self.right_electromotor_rate = 0.
      if self.right_electromotors_servo_anglex is None:
        self.right_electromotors_servo_anglex = 0.
      if self.right_electromotors_servo_angley is None:
        self.right_electromotors_servo_angley = 0.
      if self.right_electromotors_servo_fix is None:
        self.right_electromotors_servo_fix = False
    else:
      self.left_engine_rate = 0.
      self.left_engine_servo_angle = 0.
      self.left_engine_servo_fix = False
      self.right_engine_rate = 0.
      self.right_engine_servo_angle = 0.
      self.right_engine_servo_fix = False
      self.left_electromotor_rate = 0.
      self.left_electromotors_servo_anglex = 0.
      self.left_electromotors_servo_angley = 0.
      self.left_electromotors_servo_fix = False
      self.right_electromotor_rate = 0.
      self.right_electromotors_servo_anglex = 0.
      self.right_electromotors_servo_angley = 0.
      self.right_electromotors_servo_fix = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2fB2fB3fB3fB.pack(_x.left_engine_rate, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_rate, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.left_engine_rate, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_rate, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix,) = _struct_2fB2fB3fB3fB.unpack(str[start:end])
      self.left_engine_servo_fix = bool(self.left_engine_servo_fix)
      self.right_engine_servo_fix = bool(self.right_engine_servo_fix)
      self.left_electromotors_servo_fix = bool(self.left_electromotors_servo_fix)
      self.right_electromotors_servo_fix = bool(self.right_electromotors_servo_fix)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2fB2fB3fB3fB.pack(_x.left_engine_rate, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_rate, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.left_engine_rate, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_rate, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix,) = _struct_2fB2fB3fB3fB.unpack(str[start:end])
      self.left_engine_servo_fix = bool(self.left_engine_servo_fix)
      self.right_engine_servo_fix = bool(self.right_engine_servo_fix)
      self.left_electromotors_servo_fix = bool(self.left_electromotors_servo_fix)
      self.right_electromotors_servo_fix = bool(self.right_electromotors_servo_fix)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2fB2fB3fB3fB = struct.Struct("<2fB2fB3fB3fB")
"""autogenerated by genpy from actuators_canopen/SetMotorsControlResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetMotorsControlResponse(genpy.Message):
  _md5sum = "25458147911545c320c4c0a299eff763"
  _type = "actuators_canopen/SetMotorsControlResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 result

"""
  __slots__ = ['result']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetMotorsControlResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SetMotorsControl(object):
  _type          = 'actuators_canopen/SetMotorsControl'
  _md5sum = '157e71e636f411960c58c1b6f86ed290'
  _request_class  = SetMotorsControlRequest
  _response_class = SetMotorsControlResponse
