"""autogenerated by genpy from actuators/SetEngineRelayStateRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetEngineRelayStateRequest(genpy.Message):
  _md5sum = "2ee88570fa2e40557b526b169ad36373"
  _type = "actuators/SetEngineRelayStateRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 ON = 170
uint8 OFF = 85
uint8 NEUTRAL = 10

uint8 ignition1
uint8 ignition2
uint8 servo
uint8 magnetic_valve
uint8 ECU
uint8 electromotor_start
uint8 aux_fuel_pump
uint8 main_fuel_pump

"""
  # Pseudo-constants
  ON = 170
  OFF = 85
  NEUTRAL = 10

  __slots__ = ['ignition1','ignition2','servo','magnetic_valve','ECU','electromotor_start','aux_fuel_pump','main_fuel_pump']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ignition1,ignition2,servo,magnetic_valve,ECU,electromotor_start,aux_fuel_pump,main_fuel_pump

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetEngineRelayStateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ignition1 is None:
        self.ignition1 = 0
      if self.ignition2 is None:
        self.ignition2 = 0
      if self.servo is None:
        self.servo = 0
      if self.magnetic_valve is None:
        self.magnetic_valve = 0
      if self.ECU is None:
        self.ECU = 0
      if self.electromotor_start is None:
        self.electromotor_start = 0
      if self.aux_fuel_pump is None:
        self.aux_fuel_pump = 0
      if self.main_fuel_pump is None:
        self.main_fuel_pump = 0
    else:
      self.ignition1 = 0
      self.ignition2 = 0
      self.servo = 0
      self.magnetic_valve = 0
      self.ECU = 0
      self.electromotor_start = 0
      self.aux_fuel_pump = 0
      self.main_fuel_pump = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8B.pack(_x.ignition1, _x.ignition2, _x.servo, _x.magnetic_valve, _x.ECU, _x.electromotor_start, _x.aux_fuel_pump, _x.main_fuel_pump))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.ignition1, _x.ignition2, _x.servo, _x.magnetic_valve, _x.ECU, _x.electromotor_start, _x.aux_fuel_pump, _x.main_fuel_pump,) = _struct_8B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8B.pack(_x.ignition1, _x.ignition2, _x.servo, _x.magnetic_valve, _x.ECU, _x.electromotor_start, _x.aux_fuel_pump, _x.main_fuel_pump))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.ignition1, _x.ignition2, _x.servo, _x.magnetic_valve, _x.ECU, _x.electromotor_start, _x.aux_fuel_pump, _x.main_fuel_pump,) = _struct_8B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8B = struct.Struct("<8B")
"""autogenerated by genpy from actuators/SetEngineRelayStateResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetEngineRelayStateResponse(genpy.Message):
  _md5sum = "f4cf94077d46a7ac28e1686e63bb1b07"
  _type = "actuators/SetEngineRelayStateResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 res


"""
  __slots__ = ['res']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       res

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetEngineRelayStateResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.res is None:
        self.res = 0
    else:
      self.res = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.res))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.res,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.res))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.res,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SetEngineRelayState(object):
  _type          = 'actuators/SetEngineRelayState'
  _md5sum = '62d1cc4c82634d6cbc7a604e7ae5fc48'
  _request_class  = SetEngineRelayStateRequest
  _response_class = SetEngineRelayStateResponse
