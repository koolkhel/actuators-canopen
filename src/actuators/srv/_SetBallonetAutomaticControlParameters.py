"""autogenerated by genpy from actuators/SetBallonetAutomaticControlParametersRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetBallonetAutomaticControlParametersRequest(genpy.Message):
  _md5sum = "d11ea76b7c527d2454cc6af92af5efb9"
  _type = "actuators/SetBallonetAutomaticControlParametersRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 ballonet_upper_pressure_threshold
uint32 ballonet_upper_pressure_delta
uint32 ballonet_lower_pressure_threshold
uint32 ballonet_lower_pressure_delta

"""
  __slots__ = ['ballonet_upper_pressure_threshold','ballonet_upper_pressure_delta','ballonet_lower_pressure_threshold','ballonet_lower_pressure_delta']
  _slot_types = ['uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ballonet_upper_pressure_threshold,ballonet_upper_pressure_delta,ballonet_lower_pressure_threshold,ballonet_lower_pressure_delta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetBallonetAutomaticControlParametersRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ballonet_upper_pressure_threshold is None:
        self.ballonet_upper_pressure_threshold = 0
      if self.ballonet_upper_pressure_delta is None:
        self.ballonet_upper_pressure_delta = 0
      if self.ballonet_lower_pressure_threshold is None:
        self.ballonet_lower_pressure_threshold = 0
      if self.ballonet_lower_pressure_delta is None:
        self.ballonet_lower_pressure_delta = 0
    else:
      self.ballonet_upper_pressure_threshold = 0
      self.ballonet_upper_pressure_delta = 0
      self.ballonet_lower_pressure_threshold = 0
      self.ballonet_lower_pressure_delta = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.ballonet_upper_pressure_threshold, _x.ballonet_upper_pressure_delta, _x.ballonet_lower_pressure_threshold, _x.ballonet_lower_pressure_delta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ballonet_upper_pressure_threshold, _x.ballonet_upper_pressure_delta, _x.ballonet_lower_pressure_threshold, _x.ballonet_lower_pressure_delta,) = _struct_4I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.ballonet_upper_pressure_threshold, _x.ballonet_upper_pressure_delta, _x.ballonet_lower_pressure_threshold, _x.ballonet_lower_pressure_delta))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.ballonet_upper_pressure_threshold, _x.ballonet_upper_pressure_delta, _x.ballonet_lower_pressure_threshold, _x.ballonet_lower_pressure_delta,) = _struct_4I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4I = struct.Struct("<4I")
"""autogenerated by genpy from actuators/SetBallonetAutomaticControlParametersResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetBallonetAutomaticControlParametersResponse(genpy.Message):
  _md5sum = "25458147911545c320c4c0a299eff763"
  _type = "actuators/SetBallonetAutomaticControlParametersResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 result


"""
  __slots__ = ['result']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetBallonetAutomaticControlParametersResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SetBallonetAutomaticControlParameters(object):
  _type          = 'actuators/SetBallonetAutomaticControlParameters'
  _md5sum = '9a5175c8e0feb96078753a17a58f75df'
  _request_class  = SetBallonetAutomaticControlParametersRequest
  _response_class = SetBallonetAutomaticControlParametersResponse
