"""autogenerated by genpy from actuators/SetPowerRelayRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetPowerRelayRequest(genpy.Message):
  _md5sum = "361a7b0a520e6feb3d9a4c9c8c6fc57d"
  _type = "actuators/SetPowerRelayRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """byte CONTROL_TYPE_AUTOMATIC = 0
byte CONTROL_TYPE_MANUAL = 1

byte BATTERY_BACKUP_AND_FAILSAFE = 0
byte BATTERY_BACKUP_MANUAL_FAILSAFE_AUTOMATIC = 1

uint8 control_type

uint8 right_power_equipment
uint8 left_power_equipment

uint8 right_pressure_control
uint8 left_pressure_control

uint8 tail_270v_power_distribution
uint8 tail_28v_power_distribution

uint8 top_signal_lights
uint8 backup_and_failsafe_battery

uint8 load_power
uint8 bottom_signal_lights

uint8 reserved_1
uint8 reserved_2

"""
  # Pseudo-constants
  CONTROL_TYPE_AUTOMATIC = 0
  CONTROL_TYPE_MANUAL = 1
  BATTERY_BACKUP_AND_FAILSAFE = 0
  BATTERY_BACKUP_MANUAL_FAILSAFE_AUTOMATIC = 1

  __slots__ = ['control_type','right_power_equipment','left_power_equipment','right_pressure_control','left_pressure_control','tail_270v_power_distribution','tail_28v_power_distribution','top_signal_lights','backup_and_failsafe_battery','load_power','bottom_signal_lights','reserved_1','reserved_2']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       control_type,right_power_equipment,left_power_equipment,right_pressure_control,left_pressure_control,tail_270v_power_distribution,tail_28v_power_distribution,top_signal_lights,backup_and_failsafe_battery,load_power,bottom_signal_lights,reserved_1,reserved_2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetPowerRelayRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.control_type is None:
        self.control_type = 0
      if self.right_power_equipment is None:
        self.right_power_equipment = 0
      if self.left_power_equipment is None:
        self.left_power_equipment = 0
      if self.right_pressure_control is None:
        self.right_pressure_control = 0
      if self.left_pressure_control is None:
        self.left_pressure_control = 0
      if self.tail_270v_power_distribution is None:
        self.tail_270v_power_distribution = 0
      if self.tail_28v_power_distribution is None:
        self.tail_28v_power_distribution = 0
      if self.top_signal_lights is None:
        self.top_signal_lights = 0
      if self.backup_and_failsafe_battery is None:
        self.backup_and_failsafe_battery = 0
      if self.load_power is None:
        self.load_power = 0
      if self.bottom_signal_lights is None:
        self.bottom_signal_lights = 0
      if self.reserved_1 is None:
        self.reserved_1 = 0
      if self.reserved_2 is None:
        self.reserved_2 = 0
    else:
      self.control_type = 0
      self.right_power_equipment = 0
      self.left_power_equipment = 0
      self.right_pressure_control = 0
      self.left_pressure_control = 0
      self.tail_270v_power_distribution = 0
      self.tail_28v_power_distribution = 0
      self.top_signal_lights = 0
      self.backup_and_failsafe_battery = 0
      self.load_power = 0
      self.bottom_signal_lights = 0
      self.reserved_1 = 0
      self.reserved_2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_13B.pack(_x.control_type, _x.right_power_equipment, _x.left_power_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.tail_270v_power_distribution, _x.tail_28v_power_distribution, _x.top_signal_lights, _x.backup_and_failsafe_battery, _x.load_power, _x.bottom_signal_lights, _x.reserved_1, _x.reserved_2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.control_type, _x.right_power_equipment, _x.left_power_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.tail_270v_power_distribution, _x.tail_28v_power_distribution, _x.top_signal_lights, _x.backup_and_failsafe_battery, _x.load_power, _x.bottom_signal_lights, _x.reserved_1, _x.reserved_2,) = _struct_13B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_13B.pack(_x.control_type, _x.right_power_equipment, _x.left_power_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.tail_270v_power_distribution, _x.tail_28v_power_distribution, _x.top_signal_lights, _x.backup_and_failsafe_battery, _x.load_power, _x.bottom_signal_lights, _x.reserved_1, _x.reserved_2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.control_type, _x.right_power_equipment, _x.left_power_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.tail_270v_power_distribution, _x.tail_28v_power_distribution, _x.top_signal_lights, _x.backup_and_failsafe_battery, _x.load_power, _x.bottom_signal_lights, _x.reserved_1, _x.reserved_2,) = _struct_13B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13B = struct.Struct("<13B")
"""autogenerated by genpy from actuators/SetPowerRelayResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetPowerRelayResponse(genpy.Message):
  _md5sum = "25458147911545c320c4c0a299eff763"
  _type = "actuators/SetPowerRelayResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 result


"""
  __slots__ = ['result']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetPowerRelayResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.result))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SetPowerRelay(object):
  _type          = 'actuators/SetPowerRelay'
  _md5sum = '95e966597e67aeb8570554507ece9553'
  _request_class  = SetPowerRelayRequest
  _response_class = SetPowerRelayResponse
