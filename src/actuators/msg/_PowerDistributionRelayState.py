"""autogenerated by genpy from actuators/PowerDistributionRelayState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PowerDistributionRelayState(genpy.Message):
  _md5sum = "e673541d2264223b81311c229d498224"
  _type = "actuators/PowerDistributionRelayState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

uint8 both_battery_power
uint8 reserved
uint8 bottom_signal_lights
uint8 top_signal_lights
uint8 load
uint8 tail_28v_equipment
uint8 right_pressure_control
uint8 left_pressure_control
uint8 right_power_equipment
uint8 left_power_equipment

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','both_battery_power','reserved','bottom_signal_lights','top_signal_lights','load','tail_28v_equipment','right_pressure_control','left_pressure_control','right_power_equipment','left_power_equipment']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,both_battery_power,reserved,bottom_signal_lights,top_signal_lights,load,tail_28v_equipment,right_pressure_control,left_pressure_control,right_power_equipment,left_power_equipment

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerDistributionRelayState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.both_battery_power is None:
        self.both_battery_power = 0
      if self.reserved is None:
        self.reserved = 0
      if self.bottom_signal_lights is None:
        self.bottom_signal_lights = 0
      if self.top_signal_lights is None:
        self.top_signal_lights = 0
      if self.load is None:
        self.load = 0
      if self.tail_28v_equipment is None:
        self.tail_28v_equipment = 0
      if self.right_pressure_control is None:
        self.right_pressure_control = 0
      if self.left_pressure_control is None:
        self.left_pressure_control = 0
      if self.right_power_equipment is None:
        self.right_power_equipment = 0
      if self.left_power_equipment is None:
        self.left_power_equipment = 0
    else:
      self.header = std_msgs.msg.Header()
      self.both_battery_power = 0
      self.reserved = 0
      self.bottom_signal_lights = 0
      self.top_signal_lights = 0
      self.load = 0
      self.tail_28v_equipment = 0
      self.right_pressure_control = 0
      self.left_pressure_control = 0
      self.right_power_equipment = 0
      self.left_power_equipment = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10B.pack(_x.both_battery_power, _x.reserved, _x.bottom_signal_lights, _x.top_signal_lights, _x.load, _x.tail_28v_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.right_power_equipment, _x.left_power_equipment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.both_battery_power, _x.reserved, _x.bottom_signal_lights, _x.top_signal_lights, _x.load, _x.tail_28v_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.right_power_equipment, _x.left_power_equipment,) = _struct_10B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10B.pack(_x.both_battery_power, _x.reserved, _x.bottom_signal_lights, _x.top_signal_lights, _x.load, _x.tail_28v_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.right_power_equipment, _x.left_power_equipment))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.both_battery_power, _x.reserved, _x.bottom_signal_lights, _x.top_signal_lights, _x.load, _x.tail_28v_equipment, _x.right_pressure_control, _x.left_pressure_control, _x.right_power_equipment, _x.left_power_equipment,) = _struct_10B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10B = struct.Struct("<10B")
_struct_3I = struct.Struct("<3I")
