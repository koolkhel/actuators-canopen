"""autogenerated by genpy from actuators/ElectromotorsState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actuators.msg
import std_msgs.msg

class ElectromotorsState(genpy.Message):
  _md5sum = "9749659df7fdd8f031387dd2ecd5a9ec"
  _type = "actuators/ElectromotorsState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

ElectromotorState left_em
ElectromotorState right_em
ElectromotorServoState left_em_servo
ElectromotorServoState right_em_servo
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actuators/ElectromotorState
Header header

# 
float32 rate
================================================================================
MSG: actuators/ElectromotorServoState
Header header

# 
float32 anglex
float32 angley
#  
bool fix
"""
  __slots__ = ['header','left_em','right_em','left_em_servo','right_em_servo']
  _slot_types = ['std_msgs/Header','actuators/ElectromotorState','actuators/ElectromotorState','actuators/ElectromotorServoState','actuators/ElectromotorServoState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,left_em,right_em,left_em_servo,right_em_servo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ElectromotorsState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_em is None:
        self.left_em = actuators.msg.ElectromotorState()
      if self.right_em is None:
        self.right_em = actuators.msg.ElectromotorState()
      if self.left_em_servo is None:
        self.left_em_servo = actuators.msg.ElectromotorServoState()
      if self.right_em_servo is None:
        self.right_em_servo = actuators.msg.ElectromotorServoState()
    else:
      self.header = std_msgs.msg.Header()
      self.left_em = actuators.msg.ElectromotorState()
      self.right_em = actuators.msg.ElectromotorState()
      self.left_em_servo = actuators.msg.ElectromotorServoState()
      self.right_em_servo = actuators.msg.ElectromotorServoState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.left_em.header.seq, _x.left_em.header.stamp.secs, _x.left_em.header.stamp.nsecs))
      _x = self.left_em.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3I.pack(_x.left_em.rate, _x.right_em.header.seq, _x.right_em.header.stamp.secs, _x.right_em.header.stamp.nsecs))
      _x = self.right_em.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3I.pack(_x.right_em.rate, _x.left_em_servo.header.seq, _x.left_em_servo.header.stamp.secs, _x.left_em_servo.header.stamp.nsecs))
      _x = self.left_em_servo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2fB3I.pack(_x.left_em_servo.anglex, _x.left_em_servo.angley, _x.left_em_servo.fix, _x.right_em_servo.header.seq, _x.right_em_servo.header.stamp.secs, _x.right_em_servo.header.stamp.nsecs))
      _x = self.right_em_servo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2fB.pack(_x.right_em_servo.anglex, _x.right_em_servo.angley, _x.right_em_servo.fix))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_em is None:
        self.left_em = actuators.msg.ElectromotorState()
      if self.right_em is None:
        self.right_em = actuators.msg.ElectromotorState()
      if self.left_em_servo is None:
        self.left_em_servo = actuators.msg.ElectromotorServoState()
      if self.right_em_servo is None:
        self.right_em_servo = actuators.msg.ElectromotorServoState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.left_em.header.seq, _x.left_em.header.stamp.secs, _x.left_em.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_em.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.left_em.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.left_em.rate, _x.right_em.header.seq, _x.right_em.header.stamp.secs, _x.right_em.header.stamp.nsecs,) = _struct_f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_em.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.right_em.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.right_em.rate, _x.left_em_servo.header.seq, _x.left_em_servo.header.stamp.secs, _x.left_em_servo.header.stamp.nsecs,) = _struct_f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_em_servo.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.left_em_servo.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.left_em_servo.anglex, _x.left_em_servo.angley, _x.left_em_servo.fix, _x.right_em_servo.header.seq, _x.right_em_servo.header.stamp.secs, _x.right_em_servo.header.stamp.nsecs,) = _struct_2fB3I.unpack(str[start:end])
      self.left_em_servo.fix = bool(self.left_em_servo.fix)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_em_servo.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.right_em_servo.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.right_em_servo.anglex, _x.right_em_servo.angley, _x.right_em_servo.fix,) = _struct_2fB.unpack(str[start:end])
      self.right_em_servo.fix = bool(self.right_em_servo.fix)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.left_em.header.seq, _x.left_em.header.stamp.secs, _x.left_em.header.stamp.nsecs))
      _x = self.left_em.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3I.pack(_x.left_em.rate, _x.right_em.header.seq, _x.right_em.header.stamp.secs, _x.right_em.header.stamp.nsecs))
      _x = self.right_em.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3I.pack(_x.right_em.rate, _x.left_em_servo.header.seq, _x.left_em_servo.header.stamp.secs, _x.left_em_servo.header.stamp.nsecs))
      _x = self.left_em_servo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2fB3I.pack(_x.left_em_servo.anglex, _x.left_em_servo.angley, _x.left_em_servo.fix, _x.right_em_servo.header.seq, _x.right_em_servo.header.stamp.secs, _x.right_em_servo.header.stamp.nsecs))
      _x = self.right_em_servo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2fB.pack(_x.right_em_servo.anglex, _x.right_em_servo.angley, _x.right_em_servo.fix))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.left_em is None:
        self.left_em = actuators.msg.ElectromotorState()
      if self.right_em is None:
        self.right_em = actuators.msg.ElectromotorState()
      if self.left_em_servo is None:
        self.left_em_servo = actuators.msg.ElectromotorServoState()
      if self.right_em_servo is None:
        self.right_em_servo = actuators.msg.ElectromotorServoState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.left_em.header.seq, _x.left_em.header.stamp.secs, _x.left_em.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_em.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.left_em.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.left_em.rate, _x.right_em.header.seq, _x.right_em.header.stamp.secs, _x.right_em.header.stamp.nsecs,) = _struct_f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_em.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.right_em.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.right_em.rate, _x.left_em_servo.header.seq, _x.left_em_servo.header.stamp.secs, _x.left_em_servo.header.stamp.nsecs,) = _struct_f3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_em_servo.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.left_em_servo.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.left_em_servo.anglex, _x.left_em_servo.angley, _x.left_em_servo.fix, _x.right_em_servo.header.seq, _x.right_em_servo.header.stamp.secs, _x.right_em_servo.header.stamp.nsecs,) = _struct_2fB3I.unpack(str[start:end])
      self.left_em_servo.fix = bool(self.left_em_servo.fix)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_em_servo.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.right_em_servo.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.right_em_servo.anglex, _x.right_em_servo.angley, _x.right_em_servo.fix,) = _struct_2fB.unpack(str[start:end])
      self.right_em_servo.fix = bool(self.right_em_servo.fix)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f3I = struct.Struct("<f3I")
_struct_3I = struct.Struct("<3I")
_struct_2fB3I = struct.Struct("<2fB3I")
_struct_2fB = struct.Struct("<2fB")
