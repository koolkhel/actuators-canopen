"""autogenerated by genpy from actuators/EngineStateExt.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actuators.msg
import std_msgs.msg

class EngineStateExt(genpy.Message):
  _md5sum = "b445f4c4160403d11d7eeb5b5cb9c720"
  _type = "actuators/EngineStateExt"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

EngineState basic_state

uint16 rate # Speed
uint16 fuel_pressure # fuel pressure
uint16 fuel_temperature # Low Fuel
uint8 fuel_level_main_tank # main tank fuel level
uint8 fuel_level_aux_tank # additional level of fuel tank
uint16 fuel_level_auxiliary_tank # oil pressure
uint16 oil_temperature_in # oil temperature at the inlet
uint16 oil_temperature_out # oil temperature at the outlet
uint16 air_in_temperature # pumping of air temperature
uint16 cylinder1_temperature1 # 1 Low pneumatic cylinder
uint16 cylinder2_temperature2 # 2 Low pneumatic cylinder
uint16 cylinder3_temperature3 # Low pneumatic cylinder 3
uint16 cylinder4_temperature4 # Low air tsilindra4
uint16 cylinder5_temperature5 # 5 pneumatic cylinder temperature
uint16 cylinder6_temperature6 # Low air tsilindra6
uint16 supercharged_temperature # supercharged temperature
uint8 supercharged_pressure # 8 bits supercharged pressure
uint32 reserv # 
uint8 errors_cnt # of accidents
uint8 errors_flag1 # error code 
uint8 errors_flag2 # error code 
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actuators/EngineState
Header header

# 
float32 rate



"""
  __slots__ = ['header','basic_state','rate','fuel_pressure','fuel_temperature','fuel_level_main_tank','fuel_level_aux_tank','fuel_level_auxiliary_tank','oil_temperature_in','oil_temperature_out','air_in_temperature','cylinder1_temperature1','cylinder2_temperature2','cylinder3_temperature3','cylinder4_temperature4','cylinder5_temperature5','cylinder6_temperature6','supercharged_temperature','supercharged_pressure','reserv','errors_cnt','errors_flag1','errors_flag2']
  _slot_types = ['std_msgs/Header','actuators/EngineState','uint16','uint16','uint16','uint8','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint8','uint32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,basic_state,rate,fuel_pressure,fuel_temperature,fuel_level_main_tank,fuel_level_aux_tank,fuel_level_auxiliary_tank,oil_temperature_in,oil_temperature_out,air_in_temperature,cylinder1_temperature1,cylinder2_temperature2,cylinder3_temperature3,cylinder4_temperature4,cylinder5_temperature5,cylinder6_temperature6,supercharged_temperature,supercharged_pressure,reserv,errors_cnt,errors_flag1,errors_flag2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EngineStateExt, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.basic_state is None:
        self.basic_state = actuators.msg.EngineState()
      if self.rate is None:
        self.rate = 0
      if self.fuel_pressure is None:
        self.fuel_pressure = 0
      if self.fuel_temperature is None:
        self.fuel_temperature = 0
      if self.fuel_level_main_tank is None:
        self.fuel_level_main_tank = 0
      if self.fuel_level_aux_tank is None:
        self.fuel_level_aux_tank = 0
      if self.fuel_level_auxiliary_tank is None:
        self.fuel_level_auxiliary_tank = 0
      if self.oil_temperature_in is None:
        self.oil_temperature_in = 0
      if self.oil_temperature_out is None:
        self.oil_temperature_out = 0
      if self.air_in_temperature is None:
        self.air_in_temperature = 0
      if self.cylinder1_temperature1 is None:
        self.cylinder1_temperature1 = 0
      if self.cylinder2_temperature2 is None:
        self.cylinder2_temperature2 = 0
      if self.cylinder3_temperature3 is None:
        self.cylinder3_temperature3 = 0
      if self.cylinder4_temperature4 is None:
        self.cylinder4_temperature4 = 0
      if self.cylinder5_temperature5 is None:
        self.cylinder5_temperature5 = 0
      if self.cylinder6_temperature6 is None:
        self.cylinder6_temperature6 = 0
      if self.supercharged_temperature is None:
        self.supercharged_temperature = 0
      if self.supercharged_pressure is None:
        self.supercharged_pressure = 0
      if self.reserv is None:
        self.reserv = 0
      if self.errors_cnt is None:
        self.errors_cnt = 0
      if self.errors_flag1 is None:
        self.errors_flag1 = 0
      if self.errors_flag2 is None:
        self.errors_flag2 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.basic_state = actuators.msg.EngineState()
      self.rate = 0
      self.fuel_pressure = 0
      self.fuel_temperature = 0
      self.fuel_level_main_tank = 0
      self.fuel_level_aux_tank = 0
      self.fuel_level_auxiliary_tank = 0
      self.oil_temperature_in = 0
      self.oil_temperature_out = 0
      self.air_in_temperature = 0
      self.cylinder1_temperature1 = 0
      self.cylinder2_temperature2 = 0
      self.cylinder3_temperature3 = 0
      self.cylinder4_temperature4 = 0
      self.cylinder5_temperature5 = 0
      self.cylinder6_temperature6 = 0
      self.supercharged_temperature = 0
      self.supercharged_pressure = 0
      self.reserv = 0
      self.errors_cnt = 0
      self.errors_flag1 = 0
      self.errors_flag2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.basic_state.header.seq, _x.basic_state.header.stamp.secs, _x.basic_state.header.stamp.nsecs))
      _x = self.basic_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3H2B11HBI3B.pack(_x.basic_state.rate, _x.rate, _x.fuel_pressure, _x.fuel_temperature, _x.fuel_level_main_tank, _x.fuel_level_aux_tank, _x.fuel_level_auxiliary_tank, _x.oil_temperature_in, _x.oil_temperature_out, _x.air_in_temperature, _x.cylinder1_temperature1, _x.cylinder2_temperature2, _x.cylinder3_temperature3, _x.cylinder4_temperature4, _x.cylinder5_temperature5, _x.cylinder6_temperature6, _x.supercharged_temperature, _x.supercharged_pressure, _x.reserv, _x.errors_cnt, _x.errors_flag1, _x.errors_flag2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.basic_state is None:
        self.basic_state = actuators.msg.EngineState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.basic_state.header.seq, _x.basic_state.header.stamp.secs, _x.basic_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.basic_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.basic_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.basic_state.rate, _x.rate, _x.fuel_pressure, _x.fuel_temperature, _x.fuel_level_main_tank, _x.fuel_level_aux_tank, _x.fuel_level_auxiliary_tank, _x.oil_temperature_in, _x.oil_temperature_out, _x.air_in_temperature, _x.cylinder1_temperature1, _x.cylinder2_temperature2, _x.cylinder3_temperature3, _x.cylinder4_temperature4, _x.cylinder5_temperature5, _x.cylinder6_temperature6, _x.supercharged_temperature, _x.supercharged_pressure, _x.reserv, _x.errors_cnt, _x.errors_flag1, _x.errors_flag2,) = _struct_f3H2B11HBI3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.basic_state.header.seq, _x.basic_state.header.stamp.secs, _x.basic_state.header.stamp.nsecs))
      _x = self.basic_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3H2B11HBI3B.pack(_x.basic_state.rate, _x.rate, _x.fuel_pressure, _x.fuel_temperature, _x.fuel_level_main_tank, _x.fuel_level_aux_tank, _x.fuel_level_auxiliary_tank, _x.oil_temperature_in, _x.oil_temperature_out, _x.air_in_temperature, _x.cylinder1_temperature1, _x.cylinder2_temperature2, _x.cylinder3_temperature3, _x.cylinder4_temperature4, _x.cylinder5_temperature5, _x.cylinder6_temperature6, _x.supercharged_temperature, _x.supercharged_pressure, _x.reserv, _x.errors_cnt, _x.errors_flag1, _x.errors_flag2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.basic_state is None:
        self.basic_state = actuators.msg.EngineState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.basic_state.header.seq, _x.basic_state.header.stamp.secs, _x.basic_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.basic_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.basic_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.basic_state.rate, _x.rate, _x.fuel_pressure, _x.fuel_temperature, _x.fuel_level_main_tank, _x.fuel_level_aux_tank, _x.fuel_level_auxiliary_tank, _x.oil_temperature_in, _x.oil_temperature_out, _x.air_in_temperature, _x.cylinder1_temperature1, _x.cylinder2_temperature2, _x.cylinder3_temperature3, _x.cylinder4_temperature4, _x.cylinder5_temperature5, _x.cylinder6_temperature6, _x.supercharged_temperature, _x.supercharged_pressure, _x.reserv, _x.errors_cnt, _x.errors_flag1, _x.errors_flag2,) = _struct_f3H2B11HBI3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_f3H2B11HBI3B = struct.Struct("<f3H2B11HBI3B")
