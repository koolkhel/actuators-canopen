"""autogenerated by genpy from actuators/MotorsControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorsControl(genpy.Message):
  _md5sum = "88f9d0b6364646ef27fa1b6afc9e4fa0"
  _type = "actuators/MotorsControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """byte ENGINES_CONTROL_MODE_RATE = 0
byte ENGINES_CONTROL_MODE_THTROTTLE = 1

# rate or thtrottle
byte left_engine_control_regime
# Setting the rotational speed of the left main engine
float32 left_engine_control
# Setting the angle of rotation of the left main engine
float32 left_engine_servo_angle
# Set point fixation of the left rotator flight engine
bool left_engine_servo_fix

# rate or thtrottle
byte right_engine_control_regime
# Setting the rotational speed of the right main engine
float32 right_engine_control
# Setting the rotation angle of the right main engine
float32 right_engine_servo_angle
# Setting the right fixing rotator flight engine
bool right_engine_servo_fix

# Setting the rotational speed of the electric motor
float32 left_electromotor_rate
# Setting the angles of rotation of the electric motor
float32 left_electromotors_servo_anglex
float32 left_electromotors_servo_angley
# Setting rotary fixation devices, the electric motor
bool left_electromotors_servo_fix

# Setting the rotational speed of the electric motor
float32 right_electromotor_rate
# Setting the angles of rotation of the electric motor
float32 right_electromotors_servo_anglex
float32 right_electromotors_servo_angley
# Setting rotary fixation devices, the electric motor
bool right_electromotors_servo_fix

"""
  # Pseudo-constants
  ENGINES_CONTROL_MODE_RATE = 0
  ENGINES_CONTROL_MODE_THTROTTLE = 1

  __slots__ = ['left_engine_control_regime','left_engine_control','left_engine_servo_angle','left_engine_servo_fix','right_engine_control_regime','right_engine_control','right_engine_servo_angle','right_engine_servo_fix','left_electromotor_rate','left_electromotors_servo_anglex','left_electromotors_servo_angley','left_electromotors_servo_fix','right_electromotor_rate','right_electromotors_servo_anglex','right_electromotors_servo_angley','right_electromotors_servo_fix']
  _slot_types = ['byte','float32','float32','bool','byte','float32','float32','bool','float32','float32','float32','bool','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_engine_control_regime,left_engine_control,left_engine_servo_angle,left_engine_servo_fix,right_engine_control_regime,right_engine_control,right_engine_servo_angle,right_engine_servo_fix,left_electromotor_rate,left_electromotors_servo_anglex,left_electromotors_servo_angley,left_electromotors_servo_fix,right_electromotor_rate,right_electromotors_servo_anglex,right_electromotors_servo_angley,right_electromotors_servo_fix

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorsControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_engine_control_regime is None:
        self.left_engine_control_regime = 0
      if self.left_engine_control is None:
        self.left_engine_control = 0.
      if self.left_engine_servo_angle is None:
        self.left_engine_servo_angle = 0.
      if self.left_engine_servo_fix is None:
        self.left_engine_servo_fix = False
      if self.right_engine_control_regime is None:
        self.right_engine_control_regime = 0
      if self.right_engine_control is None:
        self.right_engine_control = 0.
      if self.right_engine_servo_angle is None:
        self.right_engine_servo_angle = 0.
      if self.right_engine_servo_fix is None:
        self.right_engine_servo_fix = False
      if self.left_electromotor_rate is None:
        self.left_electromotor_rate = 0.
      if self.left_electromotors_servo_anglex is None:
        self.left_electromotors_servo_anglex = 0.
      if self.left_electromotors_servo_angley is None:
        self.left_electromotors_servo_angley = 0.
      if self.left_electromotors_servo_fix is None:
        self.left_electromotors_servo_fix = False
      if self.right_electromotor_rate is None:
        self.right_electromotor_rate = 0.
      if self.right_electromotors_servo_anglex is None:
        self.right_electromotors_servo_anglex = 0.
      if self.right_electromotors_servo_angley is None:
        self.right_electromotors_servo_angley = 0.
      if self.right_electromotors_servo_fix is None:
        self.right_electromotors_servo_fix = False
    else:
      self.left_engine_control_regime = 0
      self.left_engine_control = 0.
      self.left_engine_servo_angle = 0.
      self.left_engine_servo_fix = False
      self.right_engine_control_regime = 0
      self.right_engine_control = 0.
      self.right_engine_servo_angle = 0.
      self.right_engine_servo_fix = False
      self.left_electromotor_rate = 0.
      self.left_electromotors_servo_anglex = 0.
      self.left_electromotors_servo_angley = 0.
      self.left_electromotors_servo_fix = False
      self.right_electromotor_rate = 0.
      self.right_electromotors_servo_anglex = 0.
      self.right_electromotors_servo_angley = 0.
      self.right_electromotors_servo_fix = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_b2fBb2fB3fB3fB.pack(_x.left_engine_control_regime, _x.left_engine_control, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_control_regime, _x.right_engine_control, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.left_engine_control_regime, _x.left_engine_control, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_control_regime, _x.right_engine_control, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix,) = _struct_b2fBb2fB3fB3fB.unpack(str[start:end])
      self.left_engine_servo_fix = bool(self.left_engine_servo_fix)
      self.right_engine_servo_fix = bool(self.right_engine_servo_fix)
      self.left_electromotors_servo_fix = bool(self.left_electromotors_servo_fix)
      self.right_electromotors_servo_fix = bool(self.right_electromotors_servo_fix)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_b2fBb2fB3fB3fB.pack(_x.left_engine_control_regime, _x.left_engine_control, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_control_regime, _x.right_engine_control, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.left_engine_control_regime, _x.left_engine_control, _x.left_engine_servo_angle, _x.left_engine_servo_fix, _x.right_engine_control_regime, _x.right_engine_control, _x.right_engine_servo_angle, _x.right_engine_servo_fix, _x.left_electromotor_rate, _x.left_electromotors_servo_anglex, _x.left_electromotors_servo_angley, _x.left_electromotors_servo_fix, _x.right_electromotor_rate, _x.right_electromotors_servo_anglex, _x.right_electromotors_servo_angley, _x.right_electromotors_servo_fix,) = _struct_b2fBb2fB3fB3fB.unpack(str[start:end])
      self.left_engine_servo_fix = bool(self.left_engine_servo_fix)
      self.right_engine_servo_fix = bool(self.right_engine_servo_fix)
      self.left_electromotors_servo_fix = bool(self.left_electromotors_servo_fix)
      self.right_electromotors_servo_fix = bool(self.right_electromotors_servo_fix)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b2fBb2fB3fB3fB = struct.Struct("<b2fBb2fB3fB3fB")
