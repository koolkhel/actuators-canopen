"""autogenerated by genpy from actuators/PowerSystemState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actuators.msg
import std_msgs.msg

class PowerSystemState(genpy.Message):
  _md5sum = "55d2efa72b308043feae6cbb44d2b752"
  _type = "actuators/PowerSystemState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

BatteryBackupState backup_battery_failure_state
BatteryFailsafeState failsafe_battery_failure_state
PowerDistributionRelayState distribution_relay_state
PowerDistributionLineFailure distribution_lines_failure_state

float32 left_main_engine_generator_output_current
float32 left_main_engine_generator_output_voltage

float32 right_main_engine_generator_output_current
float32 right_main_engine_generator_output_voltage

float32 left_ballonet_control_current
float32 right_ballonet_control_current

float32 power_section_28v_power_equipment_current
float32 tail_section_28v_power_equipment_current

float32 bus_backup_28v_voltage
float32 failsafe_28v_voltage

float32 backup_battery_voltage
float32 failsafe_battery_voltage

float32 backup_battery_charge_current
float32 backup_battery_discharge_current
float32 backup_battery_monoblock_temperature


float32 failsafe_battery_charge_current
float32 failsafe_battery_discharge_current
float32 failsafe_battery_monoblock_temperature


float32 left_charge_device_output_current
float32 left_charge_device_state # reserved
float32 right_charge_device_output_current
float32 right_charge_device_state # reserved

float32 load_equipment_28v_current

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actuators/BatteryBackupState
Header header

byte FAILURE_FLAG_OK = 0
byte FAILURE_FLAG_FAILURE = 1

byte FAILURE_CODE_OK = 0
byte FAILURE_CODE_CHARGE_ONLY = 1
byte FAILURE_CODE_DISCHARGE_ONLY = 2
byte FAILURE_CODE_FAILURE = 3

uint8 battery1_failure_flag
uint8 battery1_failure_code

uint8 battery2_failure_flag
uint8 battery2_failure_code

uint8 battery3_failure_flag
uint8 battery3_failure_code

================================================================================
MSG: actuators/BatteryFailsafeState
Header header

byte FAILURE_FLAG_OK = 0
byte FAILURE_FLAG_FAILURE = 1

byte FAILURE_CODE_OK = 0
byte FAILURE_CODE_CHARGE_ONLY = 1
byte FAILURE_CODE_DISCHARGE_ONLY = 2
byte FAILURE_CODE_FAILURE = 3

uint8 failsafe_battery1_failure_flag
uint8 failsafe_battery1_failure_code

uint8 failsafe_battery2_failure_flag
uint8 failsafe_battery2_failure_code

================================================================================
MSG: actuators/PowerDistributionRelayState
Header header

uint8 both_battery_power
uint8 reserved
uint8 bottom_signal_lights
uint8 top_signal_lights
uint8 load
uint8 tail_28v_equipment
uint8 right_pressure_control
uint8 left_pressure_control
uint8 right_power_equipment
uint8 left_power_equipment

================================================================================
MSG: actuators/PowerDistributionLineFailure
Header header

uint8 bottom_signal_lights_failure
uint8 top_signal_lights_failure
uint8 tail_equipment_failure
uint8 left_power_equipment_failure
uint8 right_power_equipment_failure

"""
  __slots__ = ['header','backup_battery_failure_state','failsafe_battery_failure_state','distribution_relay_state','distribution_lines_failure_state','left_main_engine_generator_output_current','left_main_engine_generator_output_voltage','right_main_engine_generator_output_current','right_main_engine_generator_output_voltage','left_ballonet_control_current','right_ballonet_control_current','power_section_28v_power_equipment_current','tail_section_28v_power_equipment_current','bus_backup_28v_voltage','failsafe_28v_voltage','backup_battery_voltage','failsafe_battery_voltage','backup_battery_charge_current','backup_battery_discharge_current','backup_battery_monoblock_temperature','failsafe_battery_charge_current','failsafe_battery_discharge_current','failsafe_battery_monoblock_temperature','left_charge_device_output_current','left_charge_device_state','right_charge_device_output_current','right_charge_device_state','load_equipment_28v_current']
  _slot_types = ['std_msgs/Header','actuators/BatteryBackupState','actuators/BatteryFailsafeState','actuators/PowerDistributionRelayState','actuators/PowerDistributionLineFailure','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,backup_battery_failure_state,failsafe_battery_failure_state,distribution_relay_state,distribution_lines_failure_state,left_main_engine_generator_output_current,left_main_engine_generator_output_voltage,right_main_engine_generator_output_current,right_main_engine_generator_output_voltage,left_ballonet_control_current,right_ballonet_control_current,power_section_28v_power_equipment_current,tail_section_28v_power_equipment_current,bus_backup_28v_voltage,failsafe_28v_voltage,backup_battery_voltage,failsafe_battery_voltage,backup_battery_charge_current,backup_battery_discharge_current,backup_battery_monoblock_temperature,failsafe_battery_charge_current,failsafe_battery_discharge_current,failsafe_battery_monoblock_temperature,left_charge_device_output_current,left_charge_device_state,right_charge_device_output_current,right_charge_device_state,load_equipment_28v_current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerSystemState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.backup_battery_failure_state is None:
        self.backup_battery_failure_state = actuators.msg.BatteryBackupState()
      if self.failsafe_battery_failure_state is None:
        self.failsafe_battery_failure_state = actuators.msg.BatteryFailsafeState()
      if self.distribution_relay_state is None:
        self.distribution_relay_state = actuators.msg.PowerDistributionRelayState()
      if self.distribution_lines_failure_state is None:
        self.distribution_lines_failure_state = actuators.msg.PowerDistributionLineFailure()
      if self.left_main_engine_generator_output_current is None:
        self.left_main_engine_generator_output_current = 0.
      if self.left_main_engine_generator_output_voltage is None:
        self.left_main_engine_generator_output_voltage = 0.
      if self.right_main_engine_generator_output_current is None:
        self.right_main_engine_generator_output_current = 0.
      if self.right_main_engine_generator_output_voltage is None:
        self.right_main_engine_generator_output_voltage = 0.
      if self.left_ballonet_control_current is None:
        self.left_ballonet_control_current = 0.
      if self.right_ballonet_control_current is None:
        self.right_ballonet_control_current = 0.
      if self.power_section_28v_power_equipment_current is None:
        self.power_section_28v_power_equipment_current = 0.
      if self.tail_section_28v_power_equipment_current is None:
        self.tail_section_28v_power_equipment_current = 0.
      if self.bus_backup_28v_voltage is None:
        self.bus_backup_28v_voltage = 0.
      if self.failsafe_28v_voltage is None:
        self.failsafe_28v_voltage = 0.
      if self.backup_battery_voltage is None:
        self.backup_battery_voltage = 0.
      if self.failsafe_battery_voltage is None:
        self.failsafe_battery_voltage = 0.
      if self.backup_battery_charge_current is None:
        self.backup_battery_charge_current = 0.
      if self.backup_battery_discharge_current is None:
        self.backup_battery_discharge_current = 0.
      if self.backup_battery_monoblock_temperature is None:
        self.backup_battery_monoblock_temperature = 0.
      if self.failsafe_battery_charge_current is None:
        self.failsafe_battery_charge_current = 0.
      if self.failsafe_battery_discharge_current is None:
        self.failsafe_battery_discharge_current = 0.
      if self.failsafe_battery_monoblock_temperature is None:
        self.failsafe_battery_monoblock_temperature = 0.
      if self.left_charge_device_output_current is None:
        self.left_charge_device_output_current = 0.
      if self.left_charge_device_state is None:
        self.left_charge_device_state = 0.
      if self.right_charge_device_output_current is None:
        self.right_charge_device_output_current = 0.
      if self.right_charge_device_state is None:
        self.right_charge_device_state = 0.
      if self.load_equipment_28v_current is None:
        self.load_equipment_28v_current = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.backup_battery_failure_state = actuators.msg.BatteryBackupState()
      self.failsafe_battery_failure_state = actuators.msg.BatteryFailsafeState()
      self.distribution_relay_state = actuators.msg.PowerDistributionRelayState()
      self.distribution_lines_failure_state = actuators.msg.PowerDistributionLineFailure()
      self.left_main_engine_generator_output_current = 0.
      self.left_main_engine_generator_output_voltage = 0.
      self.right_main_engine_generator_output_current = 0.
      self.right_main_engine_generator_output_voltage = 0.
      self.left_ballonet_control_current = 0.
      self.right_ballonet_control_current = 0.
      self.power_section_28v_power_equipment_current = 0.
      self.tail_section_28v_power_equipment_current = 0.
      self.bus_backup_28v_voltage = 0.
      self.failsafe_28v_voltage = 0.
      self.backup_battery_voltage = 0.
      self.failsafe_battery_voltage = 0.
      self.backup_battery_charge_current = 0.
      self.backup_battery_discharge_current = 0.
      self.backup_battery_monoblock_temperature = 0.
      self.failsafe_battery_charge_current = 0.
      self.failsafe_battery_discharge_current = 0.
      self.failsafe_battery_monoblock_temperature = 0.
      self.left_charge_device_output_current = 0.
      self.left_charge_device_state = 0.
      self.right_charge_device_output_current = 0.
      self.right_charge_device_state = 0.
      self.load_equipment_28v_current = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.backup_battery_failure_state.header.seq, _x.backup_battery_failure_state.header.stamp.secs, _x.backup_battery_failure_state.header.stamp.nsecs))
      _x = self.backup_battery_failure_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6B3I.pack(_x.backup_battery_failure_state.battery1_failure_flag, _x.backup_battery_failure_state.battery1_failure_code, _x.backup_battery_failure_state.battery2_failure_flag, _x.backup_battery_failure_state.battery2_failure_code, _x.backup_battery_failure_state.battery3_failure_flag, _x.backup_battery_failure_state.battery3_failure_code, _x.failsafe_battery_failure_state.header.seq, _x.failsafe_battery_failure_state.header.stamp.secs, _x.failsafe_battery_failure_state.header.stamp.nsecs))
      _x = self.failsafe_battery_failure_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4B3I.pack(_x.failsafe_battery_failure_state.failsafe_battery1_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery1_failure_code, _x.failsafe_battery_failure_state.failsafe_battery2_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery2_failure_code, _x.distribution_relay_state.header.seq, _x.distribution_relay_state.header.stamp.secs, _x.distribution_relay_state.header.stamp.nsecs))
      _x = self.distribution_relay_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10B3I.pack(_x.distribution_relay_state.both_battery_power, _x.distribution_relay_state.reserved, _x.distribution_relay_state.bottom_signal_lights, _x.distribution_relay_state.top_signal_lights, _x.distribution_relay_state.load, _x.distribution_relay_state.tail_28v_equipment, _x.distribution_relay_state.right_pressure_control, _x.distribution_relay_state.left_pressure_control, _x.distribution_relay_state.right_power_equipment, _x.distribution_relay_state.left_power_equipment, _x.distribution_lines_failure_state.header.seq, _x.distribution_lines_failure_state.header.stamp.secs, _x.distribution_lines_failure_state.header.stamp.nsecs))
      _x = self.distribution_lines_failure_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5B23f.pack(_x.distribution_lines_failure_state.bottom_signal_lights_failure, _x.distribution_lines_failure_state.top_signal_lights_failure, _x.distribution_lines_failure_state.tail_equipment_failure, _x.distribution_lines_failure_state.left_power_equipment_failure, _x.distribution_lines_failure_state.right_power_equipment_failure, _x.left_main_engine_generator_output_current, _x.left_main_engine_generator_output_voltage, _x.right_main_engine_generator_output_current, _x.right_main_engine_generator_output_voltage, _x.left_ballonet_control_current, _x.right_ballonet_control_current, _x.power_section_28v_power_equipment_current, _x.tail_section_28v_power_equipment_current, _x.bus_backup_28v_voltage, _x.failsafe_28v_voltage, _x.backup_battery_voltage, _x.failsafe_battery_voltage, _x.backup_battery_charge_current, _x.backup_battery_discharge_current, _x.backup_battery_monoblock_temperature, _x.failsafe_battery_charge_current, _x.failsafe_battery_discharge_current, _x.failsafe_battery_monoblock_temperature, _x.left_charge_device_output_current, _x.left_charge_device_state, _x.right_charge_device_output_current, _x.right_charge_device_state, _x.load_equipment_28v_current))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.backup_battery_failure_state is None:
        self.backup_battery_failure_state = actuators.msg.BatteryBackupState()
      if self.failsafe_battery_failure_state is None:
        self.failsafe_battery_failure_state = actuators.msg.BatteryFailsafeState()
      if self.distribution_relay_state is None:
        self.distribution_relay_state = actuators.msg.PowerDistributionRelayState()
      if self.distribution_lines_failure_state is None:
        self.distribution_lines_failure_state = actuators.msg.PowerDistributionLineFailure()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.backup_battery_failure_state.header.seq, _x.backup_battery_failure_state.header.stamp.secs, _x.backup_battery_failure_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_battery_failure_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.backup_battery_failure_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.backup_battery_failure_state.battery1_failure_flag, _x.backup_battery_failure_state.battery1_failure_code, _x.backup_battery_failure_state.battery2_failure_flag, _x.backup_battery_failure_state.battery2_failure_code, _x.backup_battery_failure_state.battery3_failure_flag, _x.backup_battery_failure_state.battery3_failure_code, _x.failsafe_battery_failure_state.header.seq, _x.failsafe_battery_failure_state.header.stamp.secs, _x.failsafe_battery_failure_state.header.stamp.nsecs,) = _struct_6B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.failsafe_battery_failure_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.failsafe_battery_failure_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.failsafe_battery_failure_state.failsafe_battery1_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery1_failure_code, _x.failsafe_battery_failure_state.failsafe_battery2_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery2_failure_code, _x.distribution_relay_state.header.seq, _x.distribution_relay_state.header.stamp.secs, _x.distribution_relay_state.header.stamp.nsecs,) = _struct_4B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.distribution_relay_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.distribution_relay_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.distribution_relay_state.both_battery_power, _x.distribution_relay_state.reserved, _x.distribution_relay_state.bottom_signal_lights, _x.distribution_relay_state.top_signal_lights, _x.distribution_relay_state.load, _x.distribution_relay_state.tail_28v_equipment, _x.distribution_relay_state.right_pressure_control, _x.distribution_relay_state.left_pressure_control, _x.distribution_relay_state.right_power_equipment, _x.distribution_relay_state.left_power_equipment, _x.distribution_lines_failure_state.header.seq, _x.distribution_lines_failure_state.header.stamp.secs, _x.distribution_lines_failure_state.header.stamp.nsecs,) = _struct_10B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.distribution_lines_failure_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.distribution_lines_failure_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 97
      (_x.distribution_lines_failure_state.bottom_signal_lights_failure, _x.distribution_lines_failure_state.top_signal_lights_failure, _x.distribution_lines_failure_state.tail_equipment_failure, _x.distribution_lines_failure_state.left_power_equipment_failure, _x.distribution_lines_failure_state.right_power_equipment_failure, _x.left_main_engine_generator_output_current, _x.left_main_engine_generator_output_voltage, _x.right_main_engine_generator_output_current, _x.right_main_engine_generator_output_voltage, _x.left_ballonet_control_current, _x.right_ballonet_control_current, _x.power_section_28v_power_equipment_current, _x.tail_section_28v_power_equipment_current, _x.bus_backup_28v_voltage, _x.failsafe_28v_voltage, _x.backup_battery_voltage, _x.failsafe_battery_voltage, _x.backup_battery_charge_current, _x.backup_battery_discharge_current, _x.backup_battery_monoblock_temperature, _x.failsafe_battery_charge_current, _x.failsafe_battery_discharge_current, _x.failsafe_battery_monoblock_temperature, _x.left_charge_device_output_current, _x.left_charge_device_state, _x.right_charge_device_output_current, _x.right_charge_device_state, _x.load_equipment_28v_current,) = _struct_5B23f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.backup_battery_failure_state.header.seq, _x.backup_battery_failure_state.header.stamp.secs, _x.backup_battery_failure_state.header.stamp.nsecs))
      _x = self.backup_battery_failure_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6B3I.pack(_x.backup_battery_failure_state.battery1_failure_flag, _x.backup_battery_failure_state.battery1_failure_code, _x.backup_battery_failure_state.battery2_failure_flag, _x.backup_battery_failure_state.battery2_failure_code, _x.backup_battery_failure_state.battery3_failure_flag, _x.backup_battery_failure_state.battery3_failure_code, _x.failsafe_battery_failure_state.header.seq, _x.failsafe_battery_failure_state.header.stamp.secs, _x.failsafe_battery_failure_state.header.stamp.nsecs))
      _x = self.failsafe_battery_failure_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4B3I.pack(_x.failsafe_battery_failure_state.failsafe_battery1_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery1_failure_code, _x.failsafe_battery_failure_state.failsafe_battery2_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery2_failure_code, _x.distribution_relay_state.header.seq, _x.distribution_relay_state.header.stamp.secs, _x.distribution_relay_state.header.stamp.nsecs))
      _x = self.distribution_relay_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_10B3I.pack(_x.distribution_relay_state.both_battery_power, _x.distribution_relay_state.reserved, _x.distribution_relay_state.bottom_signal_lights, _x.distribution_relay_state.top_signal_lights, _x.distribution_relay_state.load, _x.distribution_relay_state.tail_28v_equipment, _x.distribution_relay_state.right_pressure_control, _x.distribution_relay_state.left_pressure_control, _x.distribution_relay_state.right_power_equipment, _x.distribution_relay_state.left_power_equipment, _x.distribution_lines_failure_state.header.seq, _x.distribution_lines_failure_state.header.stamp.secs, _x.distribution_lines_failure_state.header.stamp.nsecs))
      _x = self.distribution_lines_failure_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5B23f.pack(_x.distribution_lines_failure_state.bottom_signal_lights_failure, _x.distribution_lines_failure_state.top_signal_lights_failure, _x.distribution_lines_failure_state.tail_equipment_failure, _x.distribution_lines_failure_state.left_power_equipment_failure, _x.distribution_lines_failure_state.right_power_equipment_failure, _x.left_main_engine_generator_output_current, _x.left_main_engine_generator_output_voltage, _x.right_main_engine_generator_output_current, _x.right_main_engine_generator_output_voltage, _x.left_ballonet_control_current, _x.right_ballonet_control_current, _x.power_section_28v_power_equipment_current, _x.tail_section_28v_power_equipment_current, _x.bus_backup_28v_voltage, _x.failsafe_28v_voltage, _x.backup_battery_voltage, _x.failsafe_battery_voltage, _x.backup_battery_charge_current, _x.backup_battery_discharge_current, _x.backup_battery_monoblock_temperature, _x.failsafe_battery_charge_current, _x.failsafe_battery_discharge_current, _x.failsafe_battery_monoblock_temperature, _x.left_charge_device_output_current, _x.left_charge_device_state, _x.right_charge_device_output_current, _x.right_charge_device_state, _x.load_equipment_28v_current))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.backup_battery_failure_state is None:
        self.backup_battery_failure_state = actuators.msg.BatteryBackupState()
      if self.failsafe_battery_failure_state is None:
        self.failsafe_battery_failure_state = actuators.msg.BatteryFailsafeState()
      if self.distribution_relay_state is None:
        self.distribution_relay_state = actuators.msg.PowerDistributionRelayState()
      if self.distribution_lines_failure_state is None:
        self.distribution_lines_failure_state = actuators.msg.PowerDistributionLineFailure()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.backup_battery_failure_state.header.seq, _x.backup_battery_failure_state.header.stamp.secs, _x.backup_battery_failure_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.backup_battery_failure_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.backup_battery_failure_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.backup_battery_failure_state.battery1_failure_flag, _x.backup_battery_failure_state.battery1_failure_code, _x.backup_battery_failure_state.battery2_failure_flag, _x.backup_battery_failure_state.battery2_failure_code, _x.backup_battery_failure_state.battery3_failure_flag, _x.backup_battery_failure_state.battery3_failure_code, _x.failsafe_battery_failure_state.header.seq, _x.failsafe_battery_failure_state.header.stamp.secs, _x.failsafe_battery_failure_state.header.stamp.nsecs,) = _struct_6B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.failsafe_battery_failure_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.failsafe_battery_failure_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.failsafe_battery_failure_state.failsafe_battery1_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery1_failure_code, _x.failsafe_battery_failure_state.failsafe_battery2_failure_flag, _x.failsafe_battery_failure_state.failsafe_battery2_failure_code, _x.distribution_relay_state.header.seq, _x.distribution_relay_state.header.stamp.secs, _x.distribution_relay_state.header.stamp.nsecs,) = _struct_4B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.distribution_relay_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.distribution_relay_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.distribution_relay_state.both_battery_power, _x.distribution_relay_state.reserved, _x.distribution_relay_state.bottom_signal_lights, _x.distribution_relay_state.top_signal_lights, _x.distribution_relay_state.load, _x.distribution_relay_state.tail_28v_equipment, _x.distribution_relay_state.right_pressure_control, _x.distribution_relay_state.left_pressure_control, _x.distribution_relay_state.right_power_equipment, _x.distribution_relay_state.left_power_equipment, _x.distribution_lines_failure_state.header.seq, _x.distribution_lines_failure_state.header.stamp.secs, _x.distribution_lines_failure_state.header.stamp.nsecs,) = _struct_10B3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.distribution_lines_failure_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.distribution_lines_failure_state.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 97
      (_x.distribution_lines_failure_state.bottom_signal_lights_failure, _x.distribution_lines_failure_state.top_signal_lights_failure, _x.distribution_lines_failure_state.tail_equipment_failure, _x.distribution_lines_failure_state.left_power_equipment_failure, _x.distribution_lines_failure_state.right_power_equipment_failure, _x.left_main_engine_generator_output_current, _x.left_main_engine_generator_output_voltage, _x.right_main_engine_generator_output_current, _x.right_main_engine_generator_output_voltage, _x.left_ballonet_control_current, _x.right_ballonet_control_current, _x.power_section_28v_power_equipment_current, _x.tail_section_28v_power_equipment_current, _x.bus_backup_28v_voltage, _x.failsafe_28v_voltage, _x.backup_battery_voltage, _x.failsafe_battery_voltage, _x.backup_battery_charge_current, _x.backup_battery_discharge_current, _x.backup_battery_monoblock_temperature, _x.failsafe_battery_charge_current, _x.failsafe_battery_discharge_current, _x.failsafe_battery_monoblock_temperature, _x.left_charge_device_output_current, _x.left_charge_device_state, _x.right_charge_device_output_current, _x.right_charge_device_state, _x.load_equipment_28v_current,) = _struct_5B23f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6B3I = struct.Struct("<6B3I")
_struct_10B3I = struct.Struct("<10B3I")
_struct_4B3I = struct.Struct("<4B3I")
_struct_5B23f = struct.Struct("<5B23f")
